import{_ as e,o as n,c as t}from"./app-Cu83vo63.js";const a={};function i(o,s){return n(),t("div")}const p=e(a,[["render",i],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/packages/com.draconware-dev.span-extensions.net.unity/","title":"SpanExtensions.Net.Unity | com.draconware-dev.span-extensions.net.unity | Unity Package (UPM) Download","lang":"en-US","frontmatter":{"layout":"PackageDetailLayout","sidebar":[{"text":"","children":[]}],"title":"SpanExtensions.Net.Unity | com.draconware-dev.span-extensions.net.unity | Unity Package (UPM) Download","description":"SpanExtensions.Net aims to make ReadOnlySpan<T> and Span<T> more accessible and overall better integrated into the .Net Ecosystem, by providing alternatives for many missing Extension Methods for Span<T>, ranging from string.Split() over Enumerable.Skip() and Enumerable.Take() to an improved ReadOnlySpan<T>.IndexOf().","cover":"https://raw.githubusercontent.com/laicasaane/SpanExtensions.Net.Unity/upm/icon.png","author":"laicasaane","tags":["utilities"],"metadataLocal":{"name":"com.draconware-dev.span-extensions.net.unity","repoUrl":"https://github.com/laicasaane/SpanExtensions.Net.Unity","displayName":"SpanExtensions.Net.Unity","description":"SpanExtensions.Net aims to make ReadOnlySpan<T> and Span<T> more accessible and overall better integrated into the .Net Ecosystem, by providing alternatives for many missing Extension Methods for Span<T>, ranging from string.Split() over Enumerable.Skip() and Enumerable.Take() to an improved ReadOnlySpan<T>.IndexOf().","licenseSpdxId":"MIT","licenseName":"MIT License","topics":["utilities"],"hunter":"laicasaane","createdAt":1716210576681,"image":"https://raw.githubusercontent.com/laicasaane/SpanExtensions.Net.Unity/upm/icon.png","parentRepoUrl":"https://github.com/draconware-dev/SpanExtensions.Net","readme":"upm:README.md","gitTagPrefix":"","gitTagIgnore":"","minVersion":"","imageFit":"cover","repo":"SpanExtensions.Net.Unity","owner":"laicasaane","ownerUrl":"https://github.com/laicasaane","parentRepo":"SpanExtensions.Net","parentOwner":"draconware-dev","parentOwnerUrl":"https://github.com/draconware-dev","readmeBranch":"upm","hunterUrl":"https://github.com/laicasaane"},"topics":[{"name":"Utilities","slug":"utilities","keywords":["utilities","tool"],"urlPath":"/packages/topics/utilities/"}],"head":[["link",{"rel":"canonical","href":"https://openupm.com/packages/com.draconware-dev.span-extensions.net.unity/"}],["meta",{"property":"og:url","content":"https://openupm.com/packages/com.draconware-dev.span-extensions.net.unity/"}],["meta",{"property":"og:site_name","content":"OpenUPM"}],["meta",{"property":"og:title","content":"SpanExtensions.Net.Unity | com.draconware-dev.span-extensions.net.unity | Unity Package (UPM) Download"}],["meta",{"property":"og:description","content":"SpanExtensions.Net aims to make ReadOnlySpan<T> and Span<T> more accessible and overall better integrated into the .Net Ecosystem, by providing alternatives for many missing Extension Methods for Span<T>, ranging from string.Split() over Enumerable.Skip() and Enumerable.Take() to an improved ReadOnlySpan<T>.IndexOf()."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/laicasaane/SpanExtensions.Net.Unity/upm/icon.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"SpanExtensions.Net.Unity | com.draconware-dev.span-extensions.net.unity | Unity Package (UPM) Download"}],["meta",{"property":"article:author","content":"laicasaane"}],["meta",{"property":"article:tag","content":"utilities"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"SpanExtensions.Net.Unity | com.draconware-dev.span-extensions.net.unity | Unity Package (UPM) Download\\",\\"description\\":\\"SpanExtensions.Net aims to make ReadOnlySpan<T> and Span<T> more accessible and overall better integrated into the .Net Ecosystem, by providing alternatives for many missing Extension Methods for Span<T>, ranging from string.Split() over Enumerable.Skip() and Enumerable.Take() to an improved ReadOnlySpan<T>.IndexOf().\\"}"]]},"headers":[],"filePathRelative":null}');export{p as comp,c as data};
